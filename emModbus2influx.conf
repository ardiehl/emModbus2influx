# em2influx sonfiguration file
# long options can be used, see em2influx --help
#
# options given at command line will override the
# ones on this file
# The first section until a line beginning with [ may contain command line
# options. Values have to be specified exactly the same way as if command
# line arguments would be used. (e.g. no blanks allowed after =)

# verbosity
#verbose=10

# default Influx measurement to use
# can be overridden by a meter definition
measurement=energyMeter

# Influx server
server=lnx.armin.d

# influxdb v1 database name
# db=myDB

# influx v1 user and password (optional)
#user=myInfluxV1_user
#password=myInfluxV1_password

# Influxdb V2 API (do not specify db, user or password)
# organization
org=diehl

# Influx bucket to use (like db in V1)
#bucket=ad
bucket=ad

# name for the tag (not the value, value equals meter name), defaults to Meter=
# can be overridden per meter definition
tagname=Device

# access token (replaced user/password)
token=8fSHguY6Cspa7-rF0w4_c7ejN9ytVOXPUuc9BrKlo8p90f19RjaqzBh5oAkOi4ztVzukpgBEmp_2GbVmVdL1og==

# MQTT
# hostname without protocol and port
mqttserver=lnx.armin.d
#mqttport=1883
mqttprefix=ad/house/energy/

# Serial port for modbus RTU, not needed if only IP connections will be used (specified per meter)
#device=/dev/ttyUSB0
device=/dev/ttyAMA0
baud=9600
parity=e
stopbits=1

poll=5

# [MeterType] sections
# ====================
# energy meter types, one [MeterType] section per meter type
# name="xxx"                 defines the name/type (case sensitive)
#
# read=start,numRegs         read the given number of registers, read can be specified multiple times
# readid=id[,start,numRegs]  read, id will be the sunspec id of the block, start will be the offset in that block
#                            starting with 0
# readid=id                  reads the whole sunspec block
# mqttqs=x                   set the qos value for mqtt (0: At most once, 1:At least once, 2: Exactly once)
# mqttretain=0|1             1: The broker stores the last retained message and the corresponding QoS for that topic

# read and readid will read the specified number of registers in a buffer.
# After that, it will be checked if a defined register is within that
# buffer and if yes, the value of the register will be read from the buffer.
# After all read and readid definition have been processed and there are
# register definitions not yet read, a single read will be performed for
# each of the remaining registers. This works fine but may result in a poor
# performance when using modbus tcp.

# sunspec[=startAddr]
# Starts scanning for sunspec (e.g. Fronius) id's at the given address, if no
# address is given, 40000 will be used.
# When using sunspec, register addresses will be offsets within each id block
# (starting with 0). At least before the first register definition the id=
# option is required to specify the id of the block to be used. The register
# address will then be calculated based on the offset of the sunspec block and
# the given register address. Multiple id= options with different id's can
# be used.
#
# influx=0|1         0 will disable this register for influxdb, sets default
#                    for registers below
# mqtt=0|1           0 will disable this register for mqtt, sets default for
#                    registers below

# Registers
# =========
## id=id
##  specify the sunspec id to be used for the following register definitions,
##  can be omitted if the id has already be defined via readid=
#
# for each register,
#   "name"=startRegisterNumber_or_SunspecOffset
# or
#   "name"="Formula"
# has to be specified. Additional, optional parameters may be specified
# (separated by comma). If no data type is specified, int16 will be assumed
# A name must be specified with quotes to be able to use reserved words like "name"
#
# Options
#  data types
#   float         - Floating point format (IEEE 754) = abcd
#   floatabcd, floatbacd, floatcdab
#                 - Floating point in different byte order
#   int int16     - integer 16 bit
#   int32         - integer 32 bit
#   int48         - integer 48 bit
#   int64         - integer 64 bit
#   uint uint16   - unsigned integer 16 bit
#   uint32        - unsigned integer 32 bit
#   uint48        - unsigned integer 48 bit
#   uint64        - unsigned integer 64 bit (only 63 bits will be stored)
#
# arr=name           This option is applicable for mqtt only and will be
#
#
# force=int|float    converts to float or integer (to have the same influx
#                    data type for different sources)
# dec=x              number of decimals, has to be >= 0
# div=x              Divider
# mul=x              Multiplier
# sf=                Register offset for sunspec scaling factor
# formula="..."      the result of the formula will be the new value.
#                    The current value as well as the values of other registers
#                    can be accessed by its name. Formulas will be executed
#                    after all registers within a meter has been read.
# influx=0|1         0 will disable this register for influxdb
# mqtt=0|1           0 will disable this register for mqtt
#
# settarif=tarifNum,startRegisterNumber_or_SunspecOffset,value,...
#                    defines the sequence to be sent to the meter for setting
#                    the tariff 1,2,3 or 4
#                    tarifNum has to be 1,2,3 or 4
#                    value is the value written to the specified register,
#                    more values can be specified for the following registers
#                    if the same value has to be written multiple times
#                    numwrites*value can be specified, e.g. for 4 times 0:
#                    settarif=1,0x300,0,0,0,0
#                    settarif=1,0x300,4*0
#
# init=startRegisterNumber_or_SunspecOffset,value,...
#                    defines register values sent for initialization.
#                    value[s] as described in settarif
#

[MeterType]
name = "Fronuis_Symo"
sunspec
id=103
readid=103	# Inverter block type 103, length=50 (at least on my Symo)
"i"  = 2,uint16,sf=6,influx=0
"i1" = 3,uint16,arr="i",sf=6,influx=0
"i2" = 4,uint16,arr="i",sf=6,influx=0
"i3" = 5,uint16,arr="i",sf=6,influx=0
"p"  = 14,uint16,sf=15,force=int,iavg
measurement="SolarInverter"
influxwritemult=12

[MeterType]
name = "Fronuis_SymoMPPT"
sunspec
id=160
readid=160
"i1" = 19,uint16,sf=2,influx=0
"u1" = 20,uint16,sf=3,iavg
"p1" = 21,uint16,sf=4,iavg
"i2" = 39,uint16,sf=2,influx=0
"u2" = 40,uint16,sf=3,iavg
"p2" = 41,uint16,sf=4,iavg
"p"  = "p1+p2",influx=0
measurement="SolarMPPT"
influxwritemult=12


[MeterType]
name = "DRT428M_3"

# set tarif time 1 for tarif 1 at any time and disable other tarif times
init = 0x300,0,1,0*10
init = 0x030c,0*12
init = 0x0318,0*12
init = 0x0324,0*12
init = 0x0330,0*12
init = 0x033c,0*12
init = 0x0348,0*12
init = 0x0354,0*12

# set current meter tarif
# settarif = n, Address or sunspec offset, uint16 value [,uint16 value ...]
# n is in range of 1 to 4
settarif = 1,0x300,0,1
settarif = 2,0x300,0,2
settarif = 3,0x300,0,3
settarif = 4,0x300,0,4

# read voltage, current and power
read =0x0e,22

# total consumption
read= 0x100,2

# consumption per tarif
read=0x130,38

# line voltage
"u1"=0x0e,float,arr="u" ,dec=1,influx=0
"u2"=0x10,float,arr="u" ,dec=1,influx=0
"u3"=0x12,float,arr="u" ,dec=1,influx=0

# active power, is in KW, recalc to watt
"p" =0x1c,float,mul=1000,force=int,influx=0
"p1"=0x1e,float,arr="p",mul=1000,force=int,imax
"p2"=0x20,float,arr="p",mul=1000,force=int,imax
"p3"=0x22,float,arr="p",mul=1000,force=int,imax

# reactive power
#"q1"=0x26,float,arr="p",dec=4
#"q2"=0x28,float,arr="p",dec=4
#"q3"=0x2a,float,arr="p",dec=4

# apparent power
#"s1"=0x2e,float,arr="p",dec=4
#"s2"=0x30,float,arr="p",dec=4
#"s3"=0x32,float,arr="p",dec=4

# current
#"i1"=0x16,float,arr="p",dec=4
#"i2"=0x18,float,arr="p",dec=4
#"i3"=0x1a,float,arr="p",dec=4

# total energy
"kwh"=0x100,float,dec=2,influx=0

# energy for up to 4 tarifs
"kwh_1"=0x130,float,force=int,arr="kwh_t",influx=0
"kwh_2"=0x13c,float,force=int,arr="kwh_t",influx=0
"kwh_3"=0x148,float,force=int,arr="kwh_t",influx=0
"kwh_4"=0x154,float,force=int,arr="kwh_t",influx=0

#influxwritemult=360		# twice per hour
influxwritemult=6			# 30 seconds



[MeterType]
# Carlo Gavazzi EM24 - tested
# Victron Energy EM24
# for the EM24 a maximum of 11 registers (words) can be read with a single request
name="em24"
# Voltage L1,L2 and L3
read=0x0000,6
"u1"=0x0000,int32l,div=10
"u2"=0x0002,int32l,div=10
"u3"=0x0004,int32l,div=10
"u"="(u1+u2+u3)/3",float

# power
read=0x0012,6
"p1"=0x0012,int32,arr="p",dec=0,div=10
"p2"=0x0012,int32,arr="p",dec=0,div=10
"p3"=0x0012,int32,arr="p",dec=0,div=10
"p" ="p1+p2+p3",float
"kwh"=0x0040,int32,force=int,div=10



# Victron Energy Pylontech connected battery pack via TCP
[MeterType]
name        = "GX_Pylontech"
read        = 259,60
"u"         = 259,uint16,dec=2,div=100
"SOC"       = 266,uint16,force=int,div=10
"i"         = 261,div=10,force=int
"Temp"      = 262,uint16,dec=1,div=10
measurement = "BatteryStatus"
influxwritemult=180		# every 5 minutes

# energy meter via Victon Energy Cerbos GX
[MeterType]
name     = "GX_EnergyMeter"
read     = 2600,38
"u1"     = 2616,uint16,arr="u",dec=1,div=10,iavg
"u2"     = 2618,uint16,arr="u",dec=1,div=10,iavg
"u3"     = 2620,uint16,arr="u",dec=1,div=10,iavg
"p"      = "p1+p2+p3",force=int,influx=0
"p1"     = 2600,int16,arr="p",imax
"p2"     = 2601,int16,arr="p",imax
"p3"     = 2602,int16,arr="p",imax
"kwh"    = 2634,uint32,force=int,div=100,influx=0
"kwho"   = 2636,uint32,force=int,div=100,influx=0
influxwritemult=6	# 30 seconds

[MeterType]
name = "GX_MultiPlus"
measurement="MultiPlus"
read = 3,90
"u1"       =3,int16,div=10,arr="u",dec=1,influx=0
"u2"       =4,int16,div=10,arr="u",dec=1,influx=0
"u3"       =5,int16,div=10,arr="u",dec=1,influx=0
"i1"       =6,int16,div=10,arr="i",dec=1,influx=0
"i2"       =7,int16,div=10,arr="i",dec=1,influx=0
"i3"       =8,int16,div=10,arr="i",dec=1,influx=0
"f1"       =9,int16,div=100,arr="f",dec=2,influx=0
"f2"       =10,int16,div=100,arr="f",dec=2,influx=0
"f3"       =11,int16,div=100,arr="f",dec=2,influx=0
"p1"       =12,int16,mul=10,arr="p",influx=0
"p2"       =13,int16,mul=10,arr="p",influx=0
"p3"       =14,int16,mul=10,arr="p",influx=0
"uo1"      =15,uint16,div=10,arr="uo",dec=1,influx=0
"uo2"      =16,uint16,div=10,arr="uo",dec=1,influx=0
"uo3"      =17,uint16,div=10,arr="uo",dec=1,influx=0
"io1"      =18,int16,div=10,arr="io",dec=1,influx=0
"io2"      =19,int16,div=10,arr="io",dec=1,influx=0
"io3"      =20,int16,div=10,arr="io",dec=1,influx=0
"fo"       =21,int16,div=100,dec=2,influx=0
"ilimit"   =22,int16,div=10,dec=2,influx=0
"po1"      =23,int16,mul=10,arr="po",influx=0
"po2"      =24,int16,mul=10,arr="po",influx=0
"po3"      =25,int16,mul=10,arr="po",influx=0
"ubatt"    =26,uint16,div=100,dec=2,influx=0
"ibatt"    =27,int16,div=10,dec=1,influx=0
"phases"   =28,uint16,influx=0,influx=0
"input"    =29,uint16,influx=0
"soc"      =30,uint16,div=10,dec=1,influx=0
"state"    =31,uint16,influx=0
"error"    =32,uint16,influx=0
"switch"   =33,uint16,influx=0
"alrm_temp"       = 34,uint16,influx=0
"alrm_battLo"     = 35,uint16,influx=0
"alrm_overload"   = 36,uint16,influx=0
"setpoint1"       = 37,int16,influx=0
"disableChargeFlagPhase" = 38,uint16,influx=0
"disableFeedbackFlagPhase" = 39,uint16,influx=0
"setpoint2"       = 40,int16,influx=0
"setpoint3"       = 41,int16,influx=0
"alrm_tempSensor" = 42,uint16,influx=0
"alrm_USensor"    = 43,uint16,influx=0
"alrm_temp1"      = 44,uint16,influx=0
"alrm_battLo1"    = 45,uint16,influx=0
"alrm_overload1"  = 46,uint16,influx=0
"alrm_ripple1"    = 47,uint16,influx=0
"alrm_temp2"      = 48,uint16,influx=0
"alrm_battLo2"    = 49,uint16,influx=0
"alrm_overload2"  = 50,uint16,influx=0
"alrm_ripple2"    = 51,uint16,influx=0
"alrm_temp3"      = 51,uint16,influx=0
"alrm_battLo3"    = 53,uint16,influx=0
"alrm_overload3"  = 54,uint16,influx=0
"alrm_ripple3"    = 55,uint16,influx=0
"disable_PVInverter" = 56,uint16,influx=0
"allowCharge"        = 57,uint16,influx=0
"allowDischarge"     = 58,uint16,influx=0
"VE_BMSExpected"     = 59,uint16,influx=0
"VE_Error"           = 60,uint16,influx=0
"temp_Batt"          = 61,int16,div=10,dec=1,influx=0
"VE_Reset"           = 62,uint16,influx=0
"warn_PhaseRotate"   = 63,uint16,influx=0
"alrm_GridLost"      = 64,uint16,influx=0
"feedInDCovervoltage"= 65,uint16,influx=0
"maxOverFeedinL1"    = 66,uint16,mul=1,influx=0
"maxOverFeedinL2"    = 67,uint16,mul=1,influx=0
"maxOverFeedinL3"    = 68,uint16,mul=1,influx=0
"IgnoreACin1"        = 69,uint16,influx=0
"IgnoreACin2"        = 70,uint16,influx=0
"setpoint_is_limit"  = 71,uint16,influx=0
"solarOffsetVoltage" = 72,uint16,influx=0
"sustainActive"      = 73,uint16,influx=0
"kwh_AC1_AC"         = 74,uint32,div=100,dec=2,influx=0
"kwh_AC1_Batt"       = 76,uint32,div=100,dec=2,influx=0
"kwh_AC2_AC"         = 78,uint32,div=100,dec=2,influx=0
"kwh_AC2_Batt"       = 80,uint32,div=100,dec=2,influx=0
"kwh_AC_AC1"         = 82,uint32,div=100,dec=2,influx=0
"kwh_AC_AC2"         = 84,uint32,div=100,dec=2,influx=0
"kwh_Batt_AC1"       = 86,uint32,div=100,dec=2,influx=0
"kwh_Batt_AC2"       = 88,uint32,div=100,dec=2,influx=0
"kwh_Batt_AC"        = 90,uint32,div=100,dec=2,influx=0
"kwh_ACO_Batt"       = 92,uint32,div=100,dec=2,influx=0


# Victron Energy, Fronius Symo via GX
[MeterType]
name = "GX_SolarInverter"
measurement="SolarInverter"
read = 1026,32
"position" = 1026,uint16,influx=0
"u1"       = 1027,uint16,arr="u",dec=1,div=10,influx=0
"u2"       = 1031,uint16,arr="u",dec=1,div=10,influx=0
"u3"       = 1035,uint16,arr="u",dec=1,div=10,influx=0
"i1"       = 1028,int16,div=10,dec=1,arr="i",influx=0
"i2"       = 1032,int16,div=10,dec=1,arr="i",influx=0
"i3"       = 1036,int16,div=10,dec=1,arr="i",influx=0
"p1"       = 1029,uint16,arr="p",iavg
"p2"       = 1033,uint16,arr="p",iavg
"p3"       = 1037,uint16,arr="p",iavg
"kwh1"     = 1046,uint32,div=100,dec=2,arr="kwh",influx=0
"kwh2"     = 1048,uint32,div=100,dec=2,arr="kwh",influx=0
"kwh3"     = 1050,uint32,div=100,dec=2,arr="kwh",influx=0
"ptot"     = 1052,int32,imax
"pmax"     = 1052,uint32,influx=0
"plimit"   = 1056,uint32,influx=0
influxwritemult=12

# Victron Energy Temp-Sensor
[MeterType]
name = "GX_TempSensor"
read = 3300,9
mqttprefix="ad/house/temp/"
measurement="Temp"
"ProdID"=3300,uint16,influx=0
"TempScaleFactor"=3301,uint16,influx=0
"TempOfs"=3302,int16,influx=0
"TempType"=3303,uint16,influx=0
"Temp"=3304,int16,formula="Temp/TempScaleFactor",force=float,dec=1
"status"=3305,uint16,influx=0
"Humidity"=3306,uint16,influx=0
"BattVoltage"=3307,uint16,influx=0
"Pressure"=3308,uint16,influx=0
influxwritemult=120		# every hour

[Meter]
disabled=0
type="GX_MultiPlus"
address=227
name="MultiPlus"
hostname="vgx.armin.d"

[Meter]
type="GX_TempSensor"
name="tempKeller"
address=24
hostname="vgx.armin.d"

[Meter]
disabled=0
type="GX_TempSensor"
name="tempGX"
address=25
hostname="vgx.armin.d"

[Meter]
disabled=0
type="GX_TempSensor"
name="tempAussen"
address=26
hostname="vgx.armin.d"

[Meter]
disabled=1
address=1
type="em24"
name="Carlo"

[Meter]
disabled=0
address=8
type="DRT428M_3"
name="G2"

[Meter]
disabled=0
address=9
type="DRT428M_3"
name="G1"


[Meter]
disabled=0
address=10	# modbus address of meter
type="DRT428M_3"
name="Allgemein"

[Meter]
disabled=0
address=11	# modbus address of meter
type="DRT428M_3"
name="Halle"


[Meter]
disabled=0
type="GX_EnergyMeter"
address=30
hostname="vgx.armin.d"
name="Grid"


[Meter]
disabled=0
type="GX_Pylontech"
measurement="BatteryStatus"
hostname="vgx.armin.d"
name="Battery"
address=225


[Meter]
disabled=0
type="GX_SolarInverter"
hostname="vgx.armin.d"
name="Solar"
address=20


[Meter]
disabled=0
name="Symo"
hostname="fronius.armin.d"
address=1
type="Fronuis_Symo"

[Meter]
disabled=0
name="SymoMPPT"
hostname="fronius.armin.d"
address=1
type="Fronuis_SymoMPPT"

# set tarif 1 .. 4 depending on a value read in one of the meters
# tarif = "MeterName","Name of value", v2[,v3[,v4]]
# tarif 2..4 will be set if value is less than v2..4, tarif 1 is the default
# v can be a float or an integer value, zero values will be ignored
#
# after tarif= a list of meters can be specified (meters="MeterName"[,"Name" ...]), default is to set the traif for all meters supporting tarifs (settarif= in meter type definition)
#[Tarifs]
# this sets tarif 2 for all meters supporting tarifs if the state of charge is less than 20%
#tarif = "Battery","SOC",20.0
#meters = "Halle"
#tarif = "Battery","u",50,52,54
#meters = "Halle"

# "virtual" meter
[Meter]
measurement="Consumption"
name="alg"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"    = "10743.019+Allgemein.kwh",dec=2
"kwh_1"  = "10743.019+Allgemein.kwh_1",dec=2
"kwh_2"  = "Allgemein.kwh_2",dec=2

[Meter]
measurement="Consumption"
name="halle"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"     = "7947.935+Halle.kwh",dec=2
"kwh_1"   = "7947.935+Halle.kwh_1",dec=2
"kwh_2"   = "Halle.kwh_2",dec=2

[Meter]
measurement="Consumption"
name="g1"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"     = "G1.kwh",dec=2
"kwh_1"   = "G1.kwh_1",dec=2
"kwh_2"   = "G1.kwh_2",dec=2

[Meter]
measurement="Consumption"
name="g2"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"     = "G2.kwh",dec=2
"kwh_1"   = "G2.kwh_1",dec=2
"kwh_2"   = "G2.kwh_2",dec=2

[Meter]
measurement="Consumption"
name="grid"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"   = "Grid.kwh",dec=2
"kwho"  = "Grid.kwho",dec=2

[Meter]
measurement="Consumption"
name="solar"
disabled=0
influxwritemult=2880	# 4 hours
"kwh"  = "Solar.kwh1+Solar.kwh2+Solar.kwh3",dec=2
